[
  {
    "objectID": "proposal.html",
    "href": "proposal.html",
    "title": "Proposal on F.R.I.E.N.D.S",
    "section": "",
    "text": "1 - Introduction\nThis project aims to investigate and analyze key character emotions, interactions, and patterns in the iconic FRIENDS TV show using a variety of datasets. By understanding how emotions evolve over time and the interaction patterns of characters, we can uncover insights about character development and audience engagement.\n\n\n2 - Workspace Setup\n\n\nWorkspace Setup\n# Importing Necessary Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\n# Setting Plot Styles\nsns.set_theme(style = \"white\")\n\n# Importing Datasets\nfriends_df = pd.read_csv('data/friends.csv')\nfriends_emotions_df = pd.read_csv('data/friends_emotions.csv')\nfriends_info_df = pd.read_csv('data/friends_info.csv')\n\n\n\n\n3 - Data\n\n\nFriends Info\n# FRIENDS\nfriends_df.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 67373 entries, 0 to 67372\nData columns (total 6 columns):\n #   Column     Non-Null Count  Dtype \n---  ------     --------------  ----- \n 0   text       67373 non-null  object\n 1   speaker    67097 non-null  object\n 2   season     67373 non-null  int64 \n 3   episode    67373 non-null  int64 \n 4   scene      67373 non-null  int64 \n 5   utterance  67373 non-null  int64 \ndtypes: int64(4), object(2)\nmemory usage: 3.1+ MB\n\n\n\n\nFriends-Emotions Info\n# FRIENDS_EMOTIONS\nfriends_emotions_df.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 12606 entries, 0 to 12605\nData columns (total 5 columns):\n #   Column     Non-Null Count  Dtype \n---  ------     --------------  ----- \n 0   season     12606 non-null  int64 \n 1   episode    12606 non-null  int64 \n 2   scene      12606 non-null  int64 \n 3   utterance  12606 non-null  int64 \n 4   emotion    12606 non-null  object\ndtypes: int64(4), object(1)\nmemory usage: 492.6+ KB\n\n\n\n\nFriends-Info Info\n# FRIENDS_INFO\nfriends_info_df.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 236 entries, 0 to 235\nData columns (total 8 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   season             236 non-null    int64  \n 1   episode            236 non-null    int64  \n 2   title              236 non-null    object \n 3   directed_by        236 non-null    object \n 4   written_by         236 non-null    object \n 5   air_date           236 non-null    object \n 6   us_views_millions  236 non-null    float64\n 7   imdb_rating        236 non-null    float64\ndtypes: float64(2), int64(2), object(4)\nmemory usage: 14.9+ KB\n\n\n\nFRIENDS\n\nColumns - text, speaker, season, episode, scene, utterance.\nRows - 67373\nInfo - This dataset contains EACH & EVERY line of dialogue that is spoken in the show, providing us with a rich database for analyzing chracter interactions & speech patterns.\n\n\n\nFRIENDS_EMOTIONS\n\nColumns - season, episode, scene, utterance, emotion.\nRows - 12606\nInfo - This dataset provides an EMOTIONAL label for each line, allowing for an in - depth analysis of character emotions across episodes & seasons.\n\n\n\nFRIENDS_INFO\n\nColumns - season, episode, title, directed_by, written_by, air_data, us_views_millions, imdb_rating.\nRows - 236\nInfo - This dataset is CRUCIAL for contextualizing the show’s progression, viewership trends, and episode quality.\n\nI have chosen these FRIENDS datasets because, well I love the show; which for me is the ONLY reason. But for a more professional reason, these datasets provide an incredibly detailed glimpse into one of the MOST BELOVED TV shows of all time.\nAs a massive fan, I am honestly interested about each of our FRIENDS development over time. This really might prove to be a treasure chest - containing insights into their emotions & personalities that have captivated the audience for decades (me personally few years).\nExploring this dataset is like ‘breaking the 4th Wall’ for me, discovering the emotional highs and lows, understanding some intricate bonds between our FRIENDS & even predicting how future episodes might unfold based on certain recurring factors.\n\n\n\n4 - Questions\nBased on my analysis, questions have been altered.\n\nHow are IMDb rating trends and viewership trends for the show ?\nWhich character dominates the dialogue in each EP and/or SS ?\nWhich character uses the most positive or optimistic language throughout the series ?\n\n\n\n5 - Analysis Plan\nBased on my analysis, the analysis plan has been altered.\n\nIMDb Rating & Viewership Trends :\n\nVariables Involved : season, episode, us_views_millions, imdb_rating.\nPlan :\n\nAggregate the IMDb ratings & viewership per season.\nVisualize results using line plots separately for IMDb ratings & viewership.\n\n\nCharacter Dominance Analysis :\n\nVariables Involved : speaker, season, episode, utterance.\nPlan :\n\nGroup by season, episode to isolate counts within season AND season, episode to isolate dialogue counts within an episode.\nAggregate utterance counts for each of the F.R.I.E.N.D.S to find the one with the most dialogue.\nVisualize results using bar plots.\n\n\nLanguage Usage :\n\nVariables Involved : season, episode, speaker, text.\nModel Development :\n\nThis will be approached in two ways -\n\nFor simplicity as our priority, utilizing the TextBlob model would prove beneficial.\nFor complexity as our priority, utilizing the BigBird model would prove beneficial.\n\n\nPlan :\n\nPerform sentimental analysis on the text field to evaluate the tone.\nCompare polarity scores by character\nVisualize results using donut plots.\n\n\n\n\n\n6 - Possible Limitations\n\nThe dataset friends_emotions_df has less rows than friends_df. This incompleteness in my data will cause some of the dialogues to not have an emotional label. This issue could possibly skew my analysis if these labels are utilized.\n\n\n\n7 - Modus Operandi\nBased on my analysis, this has been altered.\n\n\n\n\n\n\n\n\n\n\nTask Name\nStatus\nDue\nPriority\nSummary\n\n\n\n\nInitial Research\nCOMPLETE\n03-Nov-24\nHIGH\nOutline project goals, research questions, and data sources centered on 90s TV sitcom FRIENDS.\n\n\nProject Proposal for Initial Review\nCOMPLETE\n03-Nov-24\nHIGH\nSubmit the project proposal for initial instructor review, outlining the goals, research questions, and the plan of attack.\n\n\nProject Proposal for Final Review\nCOMPLETE\n10-Nov-24\nHIGH\nAmend the necessary changes suggested by the instructor to the proposal.qmd, and submit for final review.\n\n\nAbstract & Workspace Setup\nCOMPLETE\n09-Dec-24\nHIGH\nSummarize the project, along with the necessary datasets, and import necessary libraries and datasets into the environment.\n\n\nIMDb Ratings Trend\nCOMPLETE\n09-Dec-24\nHIGH\nAnalyze the friends_info.csv dataset to aggregate IMDb ratings per season & plot the line graph to assess their growth or decline.\n\n\nViewership Trend\nCOMPLETE\n09-Dec-24\nHIGH\nAnalyze the friends_info.csv dataset to aggregate US viewership per season & plot a line graph to assess their growth or decline.\n\n\nCharacter Dominance\nCOMPLETE\n09-Dec-24\nHIGH\nAnalyze the friends.csv dataset to identify the character who dominates dialogue in each season & episode. Aggregate the dialogue counts & the visualize interactive bar graphs separately for season & episode.\n\n\nEmotional Tone Analysis\nCOMPLETE\n09-Dec-24\nHIGH\nPerform sentiment analysis on the friends.csv dataset using TextBlob and BigBird and visualize the polarity of dialogues spoken by the main cast using donut charts.\n\n\nWebsite Update\nCOMPLETE\n09-Dec-2024\nHIGH\nRender the website for the last time. :)\n\n\nFinal Commit & Push\nCOMPLETE\n09-Dec-2024\nHIGH\nConfirm all changes & submit the code for the last time. :)"
  },
  {
    "objectID": "presentation.html#imdb-ratings-trend",
    "href": "presentation.html#imdb-ratings-trend",
    "title": "Presentation on F.R.I.E.N.D.S",
    "section": "IMDb Ratings Trend",
    "text": "IMDb Ratings Trend"
  },
  {
    "objectID": "presentation.html#viewership-trend",
    "href": "presentation.html#viewership-trend",
    "title": "Presentation on F.R.I.E.N.D.S",
    "section": "Viewership Trend",
    "text": "Viewership Trend"
  },
  {
    "objectID": "presentation.html#per-season",
    "href": "presentation.html#per-season",
    "title": "Presentation on F.R.I.E.N.D.S",
    "section": "Per Season",
    "text": "Per Season"
  },
  {
    "objectID": "presentation.html#per-episode",
    "href": "presentation.html#per-episode",
    "title": "Presentation on F.R.I.E.N.D.S",
    "section": "Per Episode",
    "text": "Per Episode"
  },
  {
    "objectID": "presentation.html#textblob",
    "href": "presentation.html#textblob",
    "title": "Presentation on F.R.I.E.N.D.S",
    "section": "TextBlob",
    "text": "TextBlob"
  },
  {
    "objectID": "presentation.html#bigbird",
    "href": "presentation.html#bigbird",
    "title": "Presentation on F.R.I.E.N.D.S",
    "section": "BigBird",
    "text": "BigBird"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Index on F.R.I.E.N.D.S",
    "section": "",
    "text": "Navigate via the navbar links or click below to dive deep in the Project on FRIENDS :\n\nProposal\nProject\nPresentation"
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Project on F.R.I.E.N.D.S",
    "section": "",
    "text": "This project delves deep into the dialogue dynamics, emotional patterns, and character interactions in the iconic TV show FRIENDS. The foundation pillars of this project are :\n\nfriends.csv : Contains every line of dialogue spoken across all 10 seasons, with key variables such as speaker, season, episode, scene, and utterance.\nfriends_emotions.csv : Assigns an emotional label to the dialogues, enabling sentiment analysis and tracking of character emotions.\nfriends_info.csv : Provides contextual metadata about each episode, including directed_by, written_by, us_views_millions, and imdb_rating.\n\nMy analysis is divided into these 🔑 sections :\n\nViewership & IMDb Rating Trends Over Time📈 :\n\nObjective - Analyze the average IMDb ratings and US viewership for each episode over time.\nApproach -\n\nCalculate the average IMDb rating and average US viewership for each season.\nThen plot these trends separately across seasons to see if there’s a consistent increase/decrease in ratings & viewership over time.\n\nInsight - Understand whether the show improved in terms of both quality and popularity over time or were there any dips.\n\nCharacter Domination👑 :\n\nObjective - Identify which character dominates the dialogue in each season and episode.\nApproach -\n\nAggregate the number of lines spoken by each character per season & episode.\nVisualize the results using bar charts to plot the dominant character.\n\nInsight - Uncover which characters take center stage in different story arcs and how their roles evolve across seasons.\n\nEmotional Tone Analysis💬 :\n\nObjective - Determine which character uses the most positive or optimistic language throughout the series.\nApproach -\n\nPerform sentiment analysis using models like TextBlob for simplicity and BigBird for nuanced contextual analysis.\nCompare polarity scores by character.\nVisualize emotional tone distribution using donut charts and scatter plots.\n\nInsight - Explore how each character’s emotional expression contributes to the show’s tone and audience appeal.\n\n\n\n\nWorkspace Setup\n# Importing Necessary Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom itertools import combinations\nfrom textblob import TextBlob\n\n# Setting Plot Aesthetics\nsns.set_theme(style = \"white\")\n\n# Importing Datasets\nfriends_df = pd.read_csv('data/friends.csv')\nemotions_df = pd.read_csv('data/friends_emotions.csv')\ninfo_df = pd.read_csv('data/friends_info.csv')"
  },
  {
    "objectID": "project.html#a---imdb-ratings-trend",
    "href": "project.html#a---imdb-ratings-trend",
    "title": "Project on F.R.I.E.N.D.S",
    "section": "A - IMDb Ratings Trend",
    "text": "A - IMDb Ratings Trend\n\n\nAggregating & Plotting\n# Aggregating\nseason_imdb = info_df.groupby(\"season\")[\"imdb_rating\"].mean().reset_index()\n\n# Plotting\nplt.figure(figsize = (8, 6))\nplt.plot(season_imdb[\"season\"], season_imdb[\"imdb_rating\"], marker = \"o\", linestyle = \"-\", color = \"green\", alpha = 0.8)\nplt.title(\"Average IMDb Rating per Season\", fontsize = 16)\nplt.xlabel(\"Season\", fontsize = 12)\nplt.ylabel(\"Average IMDb Rating\", fontsize = 12)\nplt.xticks(season_imdb[\"season\"])\nplt.grid(alpha = 0.5)\nplt.show()"
  },
  {
    "objectID": "project.html#b---viewership-trend",
    "href": "project.html#b---viewership-trend",
    "title": "Project on F.R.I.E.N.D.S",
    "section": "B - Viewership Trend",
    "text": "B - Viewership Trend\n\n\nAggregating & Plotting\n# Aggregating\nseason_views = info_df.groupby(\"season\")[\"us_views_millions\"].mean().reset_index()\n\n# Plotting\nplt.figure(figsize = (8, 6))\nplt.plot(season_views[\"season\"], season_views[\"us_views_millions\"], marker = \"o\", linestyle = \"-\", color = \"red\", alpha = 0.8)\nplt.title(\"Average Viewership per Season\", fontsize = 16)\nplt.xlabel(\"Season\", fontsize = 12)\nplt.ylabel(\"Average Viewership (in millions)\", fontsize = 12)\nplt.xticks(season_views[\"season\"])\nplt.grid(alpha = 0.5)\nplt.show()"
  },
  {
    "objectID": "project.html#a---per-season",
    "href": "project.html#a---per-season",
    "title": "Project on F.R.I.E.N.D.S",
    "section": "A - Per Season",
    "text": "A - Per Season\n\n\nAggregating Dialogue Count by Season\n# Grouping\ndominant_dialogue_ss = (friends_df.groupby(['season', 'speaker']).size().reset_index(name = 'dialogue_count'))\ndominant_character_ss = dominant_dialogue_ss.loc[dominant_dialogue_ss.groupby(['season'])['dialogue_count'].idxmax()].reset_index(drop = True)\n\n\n\n\nPlotting Most Dominant Character\n# Original Plot\nfig_ss = px.bar(\n    dominant_character_ss, x = \"season\", y = \"dialogue_count\", color = \"speaker\", title = \"Most Dominant Character by Season\",\n    labels = {\"season\": \"Season\", \"dialogue_count\": \"Dialogue Count\", \"speaker\": \"Character\"}\n)\n\n# Updating Plot\nfig_ss.update_layout(\n    title={\n        'text': \"Most Dominant Character by Season\", 'x': 0.5, 'xanchor': 'center', 'yanchor': 'top', 'font': dict(size = 16),\n    },\n    showlegend = True, legend_title_text = \"Character\"\n)\n\n# Updated Plot\nfig_ss.show()"
  },
  {
    "objectID": "project.html#a---per-episode",
    "href": "project.html#a---per-episode",
    "title": "Project on F.R.I.E.N.D.S",
    "section": "A - Per Episode",
    "text": "A - Per Episode\n\n\nAggregating Dialogue Count by Character\n# Grouping to No of Dialogues for Each Character\ndominant_dialogue_ep = (friends_df.groupby(['season', 'episode', 'speaker']).size().reset_index(name = 'dialogue_count'))\n\n# Finding Character with MAX Dialogue Count\ndominant_character_ep = dominant_dialogue_ep.loc[dominant_dialogue_ep.groupby(['season', 'episode'])['dialogue_count'].idxmax()].reset_index(drop = True)\n\n# Filtering out \"Scene Directions\"\nfiltered_dialogue_ep = dominant_dialogue_ep[dominant_dialogue_ep[\"speaker\"] != \"Scene Directions\"]\n\n# Identify 2nd Most Dominant if \"Scene Directions\" was the Original Dominant\ndominant_character_ep = (filtered_dialogue_ep.loc[filtered_dialogue_ep.groupby(['season', 'episode'])['dialogue_count'].idxmax()]).reset_index(drop = True)\n\n\n\n\nPlotting Most Dominant Character\n# Plotting the Most Dominant Character by Episode\nfig_ep = px.bar(\n    dominant_character_ep,\n    x = \"episode\",\n    y = \"dialogue_count\",\n    color = \"speaker\",\n    facet_row = \"season\",\n    title = \"Most Dominant Character by Episode\",\n    labels = {\"episode\": \"Episode\", \"dialogue_count\": \"\", \"speaker\": \"Character\"},\n    height = 600,\n    facet_row_spacing = 0.03,\n)\n\n# Customizing Layout\nfig_ep.update_layout(\n    title={\n        'text': \"Most Dominant Character by Episode\",\n        'x': 0.5,\n        'xanchor': 'center',\n        'yanchor': 'top',\n        'font': dict(size = 16)\n    }\n)\n\n# Updating Layout\nfig_ep.update_layout(\n    showlegend = True,\n    legend_title_text = \"Character\",\n    yaxis_title = \"Dialogue Count\",\n    uniformtext_minsize = 10,\n    uniformtext_mode = \"hide\",\n    margin = dict(l = 50, r = 50, t = 50, b = 50),\n)\n\n# Updating Y-Axis\nfig_ep.update_yaxes(\n    title_standoff = 0,\n    visible = False,\n    title=dict(text = \"Dialogue Count\", font = dict(size = 14), standoff = 20)\n)\n\n# Customizing Facet Row Labels\nfig_ep.for_each_annotation(lambda a: a.update(text=f\"{a.text.split('=')[-1]}\"))\n\n# Adding Custom Annotation for \"Dialogue Count\"\nfig_ep.add_annotation(\n    text = \"Dialogue Count\", x = -0.04, xref = \"paper\", y = 0.5, yref = \"paper\",\n    showarrow = False, font = dict(size = 14), textangle = -90\n)\n\n# Adding Custom Annotation for \"Season\"\nfig_ep.add_annotation(\n    text = \"Season\", x = 1.04, xref = \"paper\", y = 0.5, yref = \"paper\",\n    showarrow = False, font = dict(size = 14), textangle = 90\n)\n\n# Displaying\nfig_ep.show()"
  },
  {
    "objectID": "project.html#a---textblob",
    "href": "project.html#a---textblob",
    "title": "Project on F.R.I.E.N.D.S",
    "section": "A - TextBlob",
    "text": "A - TextBlob\n\n\nPlotting Sentiment Analysis\n# Importint Dataset\ntb_sentiment = pd.read_csv('data/tone_model_outputs/textblob_sentiment.csv')\n\n# Original Plot\nfig_donut = px.pie(\n    tb_sentiment, names = \"speaker\", values = \"polarity\",\n    title = \"Emotional Tone Distribution (Polarity) - OG6\", hole = 0.5,\n    color_discrete_sequence = px.colors.sequential.Turbo\n)\n\n# Updating Plot\nfig_donut.update_layout(\n  title = {\n    'text': \"Emotional Tone Distribution for F.R.I.E.N.D.S\", 'x': 0.5,\n    'xanchor': 'center', 'yanchor': 'top', 'font': dict(size = 16)\n  },\n  height = 500, width = 600,\n  margin = dict(t = 50, b = 50, l = 50, r = 50)\n)\n\n# Displaying\nfig_donut.show()"
  },
  {
    "objectID": "project.html#b---bigbird",
    "href": "project.html#b---bigbird",
    "title": "Project on F.R.I.E.N.D.S",
    "section": "B - BigBird",
    "text": "B - BigBird\n\n\nPlotting Sentiment Analysis\n# Importing Dataset\nbb_sentiment = pd.read_csv('data/tone_model_outputs/bigbird_sentiment.csv')\n\n# Original Plot\nfig_donut = px.pie(\n    bb_sentiment, names = \"speaker\", values = \"bigbird_polarity\",\n    title = \"Emotional Tone Distribution (Polarity) - OG6\", hole = 0.5,\n    color_discrete_sequence = px.colors.sequential.Turbo\n)\n\n# Updating Plot\nfig_donut.update_layout(\n  title = {\n    'text': \"Emotional Tone Distribution for F.R.I.E.N.D.S\", 'x': 0.5,\n    'xanchor': 'center', 'yanchor': 'top', 'font': dict(size = 16)\n  },\n  height = 500, width = 600,\n  margin = dict(t = 50, b = 50, l = 50, r = 50)\n)\n\n# Displaying\nfig_donut.show()"
  }
]