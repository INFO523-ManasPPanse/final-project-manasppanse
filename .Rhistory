reticulate::repl_python()
#| label: workspace-setup
#| code-summary: Workspace Setup
# Importing Necessary Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
# Setting Plot Aesthetics
sns.set_theme(style="white")
# Importing Datasets
friends_df = pd.read_csv('data/friends.csv')
friends_emotions_df = pd.read_csv('data/friends_emotions.csv')
friends_info_df = pd.read_csv('data/friends_info.csv')
#| label: character-dominance-ep
#| code-summary: Aggregating Dialogue Count by Character
dominant_dialogue_ep = (friends_df.groupby(['season', 'episode', 'speaker']).size().reset_index(name = 'dialogue_count'))
dominant_character_ep = dominant_dialogue_ep.loc[dominant_dialogue_ep.groupby(['season', 'episode'])['dialogue_count'].idxmax()].reset_index(drop = True)
# Filter out "Scene Directions"
filtered_dialogue_ep = dominant_dialogue_ep[dominant_dialogue_ep["speaker"] != "Scene Directions"]
# Identify second-most dominant if "Scene Directions" was the original dominant
dominant_character_ep = (
filtered_dialogue_ep.loc[filtered_dialogue_ep.groupby(['season', 'episode'])['dialogue_count'].idxmax()]
).reset_index(drop=True)
#| label: character-dominance-ep-plot
#| code-summary: Plotting Dialogue Count by Character
# Plotting the Most Dominant Character by Episode
fig_ep = px.bar(
dominant_character_ep,
x="episode",
y="dialogue_count",
color="speaker",
facet_row="season",
title="Most Dominant Character by Episode",
labels={"episode": "Episode", "dialogue_count": "", "speaker": "Character"},
height=600,  # Adjust total height to control elongation
facet_row_spacing=0.03,  # Adjust spacing between rows for better fit
)
# Updating layout with proper y-axis settings
fig_ep.update_layout(
showlegend=True,
legend_title_text="Character",
yaxis_title="Dialogue Count",  # Center-align this vertically
uniformtext_minsize=10,
uniformtext_mode="hide",
margin=dict(l=50, r=20, t=50, b=50),  # Adjust margins for better spacing
)
# Center the y-axis title vertically across all rows
fig_ep.update_yaxes(
title_standoff=0,  # Reduce space between y-axis title and plot
visible=False,  # Hide individual y-axis tick labels
title=dict(text="Dialogue Count", font=dict(size=14), standoff=20)  # Move title into center
)
# Customize the facet row labels: remove "season=" and keep only the number
fig_ep.for_each_annotation(lambda a: a.update(text=f"{a.text.split('=')[-1]}"))
# Add a custom annotation for "Dialogue Count" centered vertically on the left side
fig_ep.add_annotation(
text="Dialogue Count",
x=-0.04,  # Position to the left of the plot
xref="paper",
y=0.5,
yref="paper",
showarrow=False,
font=dict(size=14),
textangle=-90  # Rotate vertically
)
fig_ep.add_annotation(
text="Season",
x=1.04,  # Adjust the x position to the right side of the plot
xref="paper",
y=0.5,
yref="paper",
showarrow=False,
font=dict(size=14),
textangle=90  # Rotate text vertically to align with facet rows
)
# Display the figure
fig_ep.show()
reticulate::repl_python()
#| label: workspace-setup
#| code-summary: Workspace Setup
# Importing Necessary Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import re
from textblob import TextBlob
# Setting Plot Aesthetics
sns.set_theme(style="white")
# Importing Datasets
friends_df = pd.read_csv('data/friends.csv')
friends_emotions_df = pd.read_csv('data/friends_emotions.csv')
friends_info_df = pd.read_csv('data/friends_info.csv')
#| label: character-dominance-ep
#| code-summary: Aggregating Dialogue Count by Character
dominant_dialogue_ep = (friends_df.groupby(['season', 'episode', 'speaker']).size().reset_index(name = 'dialogue_count'))
dominant_character_ep = dominant_dialogue_ep.loc[dominant_dialogue_ep.groupby(['season', 'episode'])['dialogue_count'].idxmax()].reset_index(drop = True)
# Filter out "Scene Directions"
filtered_dialogue_ep = dominant_dialogue_ep[dominant_dialogue_ep["speaker"] != "Scene Directions"]
# Identify second-most dominant if "Scene Directions" was the original dominant
dominant_character_ep = (filtered_dialogue_ep.loc[filtered_dialogue_ep.groupby(['season', 'episode'])['dialogue_count'].idxmax()]).reset_index(drop = True)
#| label: character-dominance-ep-plot
#| code-summary: Plotting Most Dominant Character
# Plotting the Most Dominant Character by Episode
fig_ep = px.bar(
dominant_character_ep,
x = "episode",
y = "dialogue_count",
color = "speaker",
facet_row = "season",
title = "Most Dominant Character by Episode",
labels = {"episode": "Episode", "dialogue_count": "", "speaker": "Character"},
height = 600, # Adjust total height to control elongation
facet_row_spacing = 0.03,  # Adjust spacing between rows for better fit
)
fig_ep.update_layout(
title={
'text': "Most Dominant Character by Episode",  # Main title
'x': 0.5,  # Center the title horizontally
'xanchor': 'center',  # Ensure the title is anchored in the center
'yanchor': 'top',  # Anchor the title at the top of the plot
'font': dict(size=16)  # Optional: Change the font size of the title
}
)
# Updating layout with proper y-axis settings
fig_ep.update_layout(
showlegend = True,
legend_title_text = "Character",
yaxis_title = "Dialogue Count",  # Center-align this vertically
uniformtext_minsize = 10,
uniformtext_mode = "hide",
margin = dict(l = 50, r = 50, t = 50, b = 50),  # Adjust margins for better spacing
)
# Center the y-axis title vertically across all rows
fig_ep.update_yaxes(
title_standoff=0,  # Reduce space between y-axis title and plot
visible=False,  # Hide individual y-axis tick labels
title=dict(text="Dialogue Count", font=dict(size=14), standoff=20)  # Move title into center
)
# Customize the facet row labels: remove "season=" and keep only the number
fig_ep.for_each_annotation(lambda a: a.update(text=f"{a.text.split('=')[-1]}"))
# Add a custom annotation for "Dialogue Count" centered vertically on the left side
fig_ep.add_annotation(
text="Dialogue Count",
x=-0.04,  # Position to the left of the plot
xref="paper",
y=0.5,
yref="paper",
showarrow=False,
font=dict(size=14),
textangle=-90  # Rotate vertically
)
fig_ep.add_annotation(
text="Season",
x=1.04,  # Adjust the x position to the right side of the plot
xref="paper",
y=0.5,
yref="paper",
showarrow=False,
font=dict(size=14),
textangle=90  # Rotate text vertically to align with facet rows
)
# Display the figure
fig_ep.show()
#| label: character-dominance-ss
#| code-summary: Aggregating Dialogue Count by Season
dominant_dialogue_ss = (friends_df.groupby(['season', 'speaker']).size().reset_index(name = 'dialogue_count'))
dominant_character_ss = dominant_dialogue_ss.loc[dominant_dialogue_ss.groupby(['season'])['dialogue_count'].idxmax()].reset_index(drop = True)
#| label: dominate-character-ss-plot
#| code-summary: Plotting Most Dominant Character
# Plotting the most dominant character per season
fig_ss = px.bar(
dominant_character_ss,
x="season",
y="dialogue_count",
color="speaker",
title="Most Dominant Character by Season",
labels={"season": "Season", "dialogue_count": "Dialogue Count", "speaker": "Character"}
)
fig_ss.update_layout(
title={
'text': "Most Dominant Character by Season",  # Main title
'x': 0.5,  # Center the title horizontally
'xanchor': 'center',  # Ensure the title is anchored in the center
'yanchor': 'top',  # Anchor the title at the top of the plot
'font': dict(size=16)  # Optional: Change the font size of the title
}
)
fig_ss.update_layout(
showlegend = True,
legend_title_text = "Character"
)
fig_ss.show()
#| label: cleaning-dialogue
#| code-summary: Preprocessing Dialogue
# Clean Text function
def clean_text(text):
text = re.sub(r"[^a-zA-Z\s]", "", text)
text = re.sub(r"\s+", " ", text).strip()
return text
friends_df["cleaned_text"] = friends_df["text"].apply(clean_text)
#| label: textblob-analysis
#| code-summary: Analyzing Text
def get_sentiment(dialogue):
blob = TextBlob(dialogue)
return blob.sentiment.polarity, blob.sentiment.subjectivity
friends_df[['polarity', 'subjectivity']] = friends_df['cleaned_text'].apply(lambda x: pd.Series(get_sentiment(x)))
sentiment_by_character = friends_df.groupby('speaker')[['polarity', 'subjectivity']].mean().reset_index()
#| label: refine-textblob-analysis
#| code-summary: Filtering OG6 for Sentiment Analysis
# Threshold for Min. Dialogue Count
min_dialogue_threshold = 500
# Calculating Total Dialogue Count by Character
dialogue_count_by_character = friends_df.groupby("speaker").size().reset_index(name = "dialogue_count")
# Filtering Characters with Threshold
main_characters = dialogue_count_by_character[dialogue_count_by_character["dialogue_count"] >= min_dialogue_threshold]["speaker"]
# Filtering Sentiment Data for Main Characters
sentiment_main_characters = sentiment_by_character[sentiment_by_character["speaker"].isin(main_characters)]
# Sorting by Polarity (Positivity) for Better Readability
sentiment_main_characters = sentiment_main_characters.sort_values(by="polarity", ascending=False).reset_index(drop=True)
# Defining OG6 List
main_cast = ["Chandler Bing", "Joey Tribbiani", "Monica Geller", "Phoebe Buffay", "Rachel Green", "Ross Geller"]
sentiment_main_cast = sentiment_main_characters[sentiment_main_characters["speaker"].isin(main_cast)]
#| label: plot-textblob-analysis
#| code-summary: Plotting Sentiment Analysis
fig_donut = px.pie(
sentiment_main_cast,
names = "speaker",
values = "polarity",
title = "Emotional Tone Distribution (Polarity) - OG6",
hole = 0.5,
color_discrete_sequence = px.colors.sequential.Turbo
)
fig_donut.show()
#| label: plot-scatter
#| code-summary: Scatter Plot for Polarity vs Subjectivity
fig_scatter = px.scatter(
sentiment_main_cast,
x = "polarity",
y = "subjectivity",
text = "speaker",
title = "Polarity vs. Subjectivity - OG6",
labels = {"polarity": "Positivity", "subjectivity": "Subjectivity"},
)
fig_scatter.update_traces(textposition = 'top center')
fig_scatter.show()
#| label: bert-analysis
#| code-summary: Sentiment Analysis using BERT
from transformers import pipeline
# Load BERT-based sentiment analysis model
sentiment_pipeline = pipeline("sentiment-analysis")
# Function to get BERT sentiment polarity
def get_bert_sentiment(text):
result = sentiment_pipeline(text)
label = result[0]['label']
score = result[0]['score']
# Convert label to numeric polarity
if label == 'POSITIVE':
polarity = score
else:
polarity = -score
return polarity
# Apply BERT Sentiment to each dialogue
friends_df["bert_polarity"] = friends_df["cleaned_text"].apply(get_bert_sentiment)
